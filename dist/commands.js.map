{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global g, global, Office, self, window, mailbox, mailboxItem, classifications, classifierRegexp, classifiedSubjectRegexp */\n\n\nlet mailboxItem;\nlet mailbox;\nconst g = getGlobal();\n\nOffice.onReady(function(info) {\n    // If needed, Office.js is ready to be called\n    mailboxItem = Office.context.mailbox.item;\n    mailbox = Office.context.mailbox;\n\n    for (let name in classifications) {\n        let classification = classifications[name];\n        g[classification.globalFunction] = actionMarkFactory(classification);\n    }\n\n    console.log(`Office.js is now ready in ${info.host} on ${info.platform}`);\n});\n\nfunction getGlobal() {\n    return typeof self !== \"undefined\" ?\n        self :\n        typeof window !== \"undefined\" ?\n        window :\n        typeof global !== \"undefined\" ?\n        global :\n        undefined;\n}\n\n// The add-in command functions need to be available in global scope\ng.validateBody = validateBody;\n\nlet classifications = {\n    \"green\": {\n        \"name\": \"TLP Green\",\n        \"globalFunction\": \"actionMarkGreen\",\n        \"subject\": \"[Classified Green 🟢]\",\n        \"icon80\": \"IconGreen.80x80\"\n    },\n    \"amber\": {\n        \"name\": \"TLP Amber\",\n        \"globalFunction\": \"actionMarkAmber\",\n        \"subject\": \"[Classified Amber 🟠]\",\n        \"icon80\": \"IconOrange.80x80\"\n    },\n    \"red\": {\n        \"name\": \"TLP Red\",\n        \"globalFunction\": \"actionMarkRed\",\n        \"subject\": \"[Classified Red 🔴]\",\n        \"icon80\": \"IconRed.80x80\"\n    }\n}\n\nconst classifierRegexp = /\\s*\\[classified (red|green|amber) \\W\\]\\s*/giu;\nconst classifiedSubjectRegexp = /^(?:\\s?re:\\s?|\\s?aw:\\s?)*\\s*\\[classified (red|green|amber) \\W\\].*/iu;\n\nfunction removeClassification(str) {\n    return str.replace(classifierRegexp, \" \").trim();\n}\n\nfunction addClassificationPrefix(classification, str) {\n    if (!classification) {\n        return str;\n    }\n    return classification.subject + \" \" + str;\n}\n\nfunction getClassification(subject) {\n    subject = subject.toLowerCase();\n    if (classifiedSubjectRegexp.test(subject)) {\n        let matches = subject.match(classifiedSubjectRegexp);\n        return classifications[matches[1]];\n    } else {\n        return null;\n    }\n}\n\nfunction normalizeClassification(subject) {\n    let classification = getClassification(subject);\n\n    if (!classification) {\n        return subject\n    }\n\n    subject = removeClassification(subject)\n    subject = addClassificationPrefix(classification, subject)\n    return subject\n}\n\nfunction actionMarkFactory(classification) {\n\n    return function(event) {\n\n        let successMessage = {\n            type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n            message: \"Marked message \" + classification.name,\n            icon: classification.icon80,\n            persistent: false,\n        };\n\n        let errorMessage = {\n            type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\n            message: \"Failed to mark message (requested \" + classification.name + \")\",\n        };\n\n        setSubjectPrefix(classification, function(ret) {\n\n            if (ret) {\n                // Show a notification message\n                Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", successMessage);\n\n            } else {\n                // Show an error message\n                Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", errorMessage);\n            }\n\n            // Be sure to indicate when the add-in command function is complete\n            event.completed();\n\n        });\n\n    };\n\n}\n\n// Set the subject of the item that the user is composing.\nfunction setSubjectPrefix(requestedClassification, callback) {\n\n    // Check conversation history\n    findConversationSubjects(mailboxItem.conversationId, function(values) {\n\n        let classifiedConversation = false;\n        let classificationConversation = \"\";\n\n        for (value of values) {\n            let curClassification = getClassification(value);\n            if (curClassification) {\n                classifiedConversation = true;\n                classificationConversation = curClassification;\n                break;\n            }\n        }\n\n        // Check current subject\n        mailboxItem.subject.getAsync(\n            function(asyncResult) {\n                if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                    console.log(asyncResult.error.message);\n                    callback(false);\n                } else {\n                    // Successfully got the subject, display it.\n\n                    let subject = asyncResult.value;\n                    let curClassification = getClassification(subject);\n\n                    if (curClassification) {\n                        // Item subject classified\n\n                        if (classifiedConversation) {\n                            // Item is marked and part of classified conversation\n                            if (curClassification.subject === classificationConversation.subject && classificationConversation.subject === requestedClassification.subject) {\n                                // Classification already matches, normalize\n                                subject = normalizeClassification(subject);\n                            } else {\n                                // Do not allow reclassifying\t                         \n                                callback(false);\n                                return;\n                            }\n                            //prefix = curClassification.subject;\n                        } else {\n                            // Item is marked and not part of classified conversation, allow changing\n                            subject = removeClassification(subject);\n                            subject = addClassificationPrefix(requestedClassification, subject);\n                        }\n                    } else {\n                        if (classifiedConversation) {\n\n                            // Iten is unmarked, and part of classified conversation, force mark\n                            subject = addClassificationPrefix(classificationConversation, subject);\n                        } else {\n                            // Proceed with marking image\n                            subject = addClassificationPrefix(requestedClassification, subject);\n                        }\n                    }\n\n                    mailboxItem.subject.setAsync(\n                        subject, null,\n                        function(asyncResult) {\n                            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                                console.log(asyncResult.error.message);\n                                callback(false);\n                            } else {\n                                // Successfully set the subject.\n                                // Do whatever appropriate for your scenario\n                                // using the arguments var1 and var2 as applicable.\n                                callback(true);\n\n\n\n                            }\n                        });\n\n\n\n\n                }\n            });\n\n\n\n    }, function(error) {\n\n        callback(false);\n\n    });\n\n\n\n}\n\n\nfunction validateBody(event) {\n    /*mailboxItem.body.getAsync(\"html\", {\n        asyncContext: event\n    }, checkBodyOnlyOnSendCallBack);*/\n    forceClassificationSubject(event);\n}\n\n// Check if the subject should be changed. If it is already changed allow send. Otherwise change it.\n// <param name=\"event\">MessageSend event passed from the calling function.</param>\nfunction forceClassificationSubject(event) {\n    mailboxItem.subject.getAsync({\n            asyncContext: event\n        },\n        function(asyncResult) {\n\n            let subject = asyncResult.value;\n            let curClassification = getClassification(subject);\n\n            if (!curClassification) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Please choose a classification for this email.'\n                });\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n                return;\n            }\n            \n            // Got valid classification, force normalization and category\n            Office.context.mailbox.item.saveAsync(\n\t\t\tfunction callback(result) {\n\t\t\t\tlet itemId = result.value;\n\t\t\t\tsetCategory(itemId, curClassification.name, asyncResult.asyncContext, function(context) {\n\t\t\t\t\tsubject = normalizeClassification(subject);\n\t\t\t\t\tsubjectOnSendChange(subject, context);\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t\t\t\n\t\t\t// Process the result.\n\t\t\t});\n            \n}\n\n\nfunction subjectOnSendChange(subject, event) {\n    mailboxItem.subject.setAsync(\n        subject, {\n            asyncContext: event\n        },\n        function(asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Unable to set the subject.'\n                });\n\n                // Block send.\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n            } else {\n                // Allow send.\n                asyncResult.asyncContext.completed({\n                    allowEvent: true\n                });\n            }\n\n        });\n}\n\n\n// Demo functions adapted from Microsoft\n// MIT License, https://github.com/OfficeDev/Office-Add-in-samples\n\n\n// Invoke by Contoso Subject and CC Checker add-in before send is allowed.\n// <param name=\"event\">MessageSend event is automatically passed by BlockOnSend code to the function specified in the manifest.</param>\nfunction validateSubjectAndCC(event) {\n    shouldChangeSubjectOnSend(event);\n}\n\n// Check if the subject should be changed. If it is already changed allow send. Otherwise change it.\n// <param name=\"event\">MessageSend event passed from the calling function.</param>\nfunction shouldChangeSubjectOnSend(event) {\n    mailboxItem.subject.getAsync({\n            asyncContext: event\n        },\n        function(asyncResult) {\n            addCCOnSend(asyncResult.asyncContext);\n            //console.log(asyncResult.value);\n            // Match string.\n            var checkSubject = (new RegExp(/\\[Checked\\]/)).test(asyncResult.value)\n            // Add [Checked]: to subject line.\n            subject = '[Checked]: ' + asyncResult.value;\n\n            // Check if a string is blank, null or undefined.\n            // If yes, block send and display information bar to notify sender to add a subject.\n            if (asyncResult.value === null || (/^\\s*$/).test(asyncResult.value)) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Please enter a subject for this email.'\n                });\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n            } else {\n                // If can't find a [Checked]: string match in subject, call subjectOnSendChange function.\n                if (!checkSubject) {\n                    subjectOnSendChange(subject, asyncResult.asyncContext);\n                    //console.log(checkSubject);\n                } else {\n                    // Allow send.\n                    asyncResult.asyncContext.completed({\n                        allowEvent: true\n                    });\n                }\n            }\n\n        }\n    )\n}\n\n// Add a CC to the email.  In this example, CC contoso@contoso.onmicrosoft.com\n// <param name=\"event\">MessageSend event passed from calling function</param>\nfunction addCCOnSend(event) {\n    mailboxItem.cc.setAsync(['Contoso@contoso.onmicrosoft.com'], {\n        asyncContext: event\n    });\n}\n\n\n// Check if the body contains a specific set of blocked words. If it contains the blocked words, block email from being sent. Otherwise allows sending.\n// <param name=\"asyncResult\">MessageSend event passed from the calling function.</param>\nfunction checkBodyOnlyOnSendCallBack(asyncResult) {\n    var listOfBlockedWords = new Array(\"blockedword\", \"blockedword1\", \"blockedword2\");\n    var wordExpression = listOfBlockedWords.join('|');\n\n    // \\b to perform a \"whole words only\" search using a regular expression in the form of \\bword\\b.\n    // i to perform case-insensitive search.\n    var regexCheck = new RegExp('\\\\b(' + wordExpression + ')\\\\b', 'i');\n    var checkBody = regexCheck.test(asyncResult.value);\n\n    if (checkBody) {\n        mailboxItem.notificationMessages.addAsync('NoSend', {\n            type: 'errorMessage',\n            message: 'Blocked words have been found in the body of this email. Please remove them.'\n        });\n        // Block send.\n        asyncResult.asyncContext.completed({\n            allowEvent: false\n        });\n    } else {\n\n        // Allow send.\n        asyncResult.asyncContext.completed({\n            allowEvent: true\n        });\n    }\n}\n\n\n// Following functions adapted from easyEws\n// GNU Public License v3, https://github.com/davecra/easyEWS\n\nfunction asyncEws(soap, successCallback, errorCallback) {\n\n    mailbox.makeEwsRequestAsync(soap, function(ewsResult) {\n        if (ewsResult.status === Office.AsyncResultStatus.Succeeded) {\n            console.log(\"makeEwsRequestAsync success. \" + ewsResult.status);\n            let parser = new DOMParser();\n            let xmlDoc = parser.parseFromString(ewsResult.value, \"text/xml\");\n            successCallback(xmlDoc);\n        } else {\n            console.log(\"makeEwsRequestAsync failed. \" + ewsResult.error);\n            errorCallback(ewsResult.error);\n        }\n    });\n\n};\n\nfunction getNodes(node, elementNameWithNS) {\n    let elementWithoutNS = elementNameWithNS.substring(elementNameWithNS.indexOf(\":\") + 1);\n    let retVal = node.getElementsByTagName(elementNameWithNS);\n    if (retVal == null || retVal.length == 0) {\n        retVal = node.getElementsByTagName(elementWithoutNS);\n    }\n    return retVal;\n};\n\nfunction getSoapHeader(request) {\n    let result =\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n        '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' +\n        '               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"' +\n        '               xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"' +\n        '               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"' +\n        '               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">' +\n        '   <soap:Header>' +\n        '       <RequestServerVersion Version=\"Exchange2013\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\" soap:mustUnderstand=\"0\" />' +\n        '   </soap:Header>' +\n        '   <soap:Body>' + request + '</soap:Body>' +\n        '</soap:Envelope>';\n    return result;\n};\n\nfunction findConversationSubjects(conversationId, successCallback, errorCallback) {\n    if (!conversationId) {\n        // Trivial case, no conversations here\n        successCallback([]);\n    }\n    let soap =\n        '       <m:GetConversationItems>' +\n        '           <m:ItemShape>' +\n        '               <t:BaseShape>IdOnly</t:BaseShape>' +\n        '               <t:AdditionalProperties>' +\n        '                   <t:FieldURI FieldURI=\"item:Subject\" />' +\n        '                   <t:FieldURI FieldURI=\"item:DateTimeReceived\" />' +\n        '               </t:AdditionalProperties>' +\n        '           </m:ItemShape>' +\n        '           <m:FoldersToIgnore>' +\n        '               <t:DistinguishedFolderId Id=\"deleteditems\" />' +\n        '               <t:DistinguishedFolderId Id=\"drafts\" />' +\n        '           </m:FoldersToIgnore>' +\n        '           <m:SortOrder>TreeOrderDescending</m:SortOrder>' +\n        '           <m:Conversations>' +\n        '               <t:Conversation>' +\n        '                   <t:ConversationId Id=\"' + conversationId + '\" />' +\n        '               </t:Conversation>' +\n        '           </m:Conversations>' +\n        '       </m:GetConversationItems>';\n    soap = getSoapHeader(soap);\n    // Make EWS call\n    asyncEws(soap, function(xmlDoc) {\n        let nodes = getNodes(xmlDoc, \"t:Subject\");\n        let msgs = [];\n        for (let msg of nodes) {\n            msgs.push(msg.textContent);\n        }\n        successCallback(msgs);\n\n    }, function(errorDetails) {\n        if (errorCallback != null)\n            errorCallback(errorDetails);\n    });\n};\n\nfunction setCategory(itemId, category, context, callback) {\n\t// ignore missing item ID to improve UX\n\tif (!itemId) {\n\t\tconsole.log(\"Ignoring invalid itemId in setCategory: \"+itemId)\n\t\tcallback(context);\n\t\treturn;\n\t}\n\t\n\tlet soapUpdate = `<UpdateItem MessageDisposition=\"SaveOnly\" ConflictResolution=\"AlwaysOverwrite\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n\t\t\t<ItemChanges>\n\t\t\t\t<t:ItemChange>\n\t\t\t\t\t<t:ItemId Id=\"`+itemId+`\"/>\n\t\t\t\t\t<t:Updates>\n\t\t\t\t\t\t<t:SetItemField>\n\t\t\t\t\t\t\t<t:ExtendedFieldURI PropertySetId=\"00020329-0000-0000-C000-000000000046\" PropertyName=\"Keywords\" PropertyType=\"StringArray\" />\n\t\t\t\t\t\t\t<t:Message>\n\t\t\t\t\t\t\t\t<t:ExtendedProperty>\n\t\t\t\t\t\t\t\t\t<t:ExtendedFieldURI PropertySetId=\"00020329-0000-0000-C000-000000000046\" PropertyName=\"Keywords\" PropertyType=\"StringArray\" />\n\t\t\t\t\t\t\t\t\t<t:Values>\n\t\t\t\t\t\t\t\t\t\t<t:Value>`+category+`</t:Value>\n\t\t\t\t\t\t\t\t\t</t:Values>\n\t\t\t\t\t\t\t\t</t:ExtendedProperty>\n\t\t\t\t\t\t\t</t:Message>\n\t\t\t\t\t\t</t:SetItemField>\n\t\t\t\t\t</t:Updates>\n\t\t\t\t</t:ItemChange>\n\t\t\t</ItemChanges>\n\t\t</UpdateItem>`;\n    \n  let soap = getSoapHeader(soapUpdate);\n \n  asyncEws(soap, function(xmlDoc) {\n       console.log(\"Successfully set category: \" + xmlDoc);\n       callback(context);\n\n    }, function(errorDetails) {\n      console.log(\"Error setting category: \" + errorDetails);\n      callback(context);\n  });    \n     \n}\n"],"names":["mailboxItem","mailbox","g","getGlobal","Office","onReady","info","context","item","name","classifications","classification","globalFunction","actionMarkFactory","console","log","concat","host","platform","self","window","global","undefined","validateBody","classifierRegexp","classifiedSubjectRegexp","removeClassification","str","replace","trim","addClassificationPrefix","subject","getClassification","toLowerCase","test","matches","match","normalizeClassification","event","successMessage","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","message","icon","icon80","persistent","errorMessage","ErrorMessage","setSubjectPrefix","ret","notificationMessages","replaceAsync","completed","requestedClassification","callback","findConversationSubjects","conversationId","values","classifiedConversation","classificationConversation","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","curClassification","err","e","f","getAsync","asyncResult","status","AsyncResultStatus","Failed","error","setAsync","forceClassificationSubject","asyncContext","addAsync","allowEvent","saveAsync","result","itemId","setCategory","subjectOnSendChange","validateSubjectAndCC","shouldChangeSubjectOnSend","addCCOnSend","checkSubject","RegExp","cc","checkBodyOnlyOnSendCallBack","listOfBlockedWords","Array","wordExpression","join","regexCheck","checkBody","asyncEws","soap","successCallback","errorCallback","makeEwsRequestAsync","ewsResult","Succeeded","parser","DOMParser","xmlDoc","parseFromString","getNodes","node","elementNameWithNS","elementWithoutNS","substring","indexOf","retVal","getElementsByTagName","length","getSoapHeader","request","nodes","msgs","_iterator2","_step2","msg","push","textContent","errorDetails","category","soapUpdate"],"sourceRoot":""}