{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/./src/commands/commands.js","webpack://office-addin-taskpane-js/webpack/runtime/global"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global global, Office, self, window, mailbox, mailboxItem */\n\n\nlet mailboxItem;\nlet mailbox;\nOffice.onReady(function(info) {\n    // If needed, Office.js is ready to be called\n\n\n    mailboxItem = Office.context.mailbox.item;\n    mailbox = Office.context.mailbox;\n\n    console.log(`Office.js is now ready in ${info.host} on ${info.platform}`);\n\n\n});\n\nfunction action(event) {\n    const message = {\n        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n        message: \"Performed action.\",\n        icon: \"Icon.80x80\",\n        persistent: true,\n    };\n\n    // Show a notification message\n    Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n    // Be sure to indicate when the add-in command function is complete\n    event.completed();\n}\n\nconst g = getGlobal();\n\nfunction getGlobal() {\n    return typeof self !== \"undefined\" ?\n        self :\n        typeof window !== \"undefined\" ?\n        window :\n        typeof global !== \"undefined\" ?\n        global :\n        undefined;\n}\n\n// The add-in command functions need to be available in global scope\ng.action = action;\ng.actionMarkGreen = actionMarkGreen;\ng.actionMarkAmber = actionMarkAmber;\ng.actionMarkRed = actionMarkRed;\ng.validateBody = validateBody;\n\n/* TODO dynamic evaluation of action functions */\n\nfunction actionMarkGreen(event) {\n\n    const successMessage = {\n        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n        message: \"Marked message green\",\n        icon: \"IconGreen.80x80\",\n        persistent: false,\n    };\n\n    const errorMessage = {\n        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n        message: \"Failed to mark message green\",\n        icon: \"IconGreen.80x80\",\n        persistent: true,\n    };\n\n    setSubjectPrefix(\"[Classified Green ðŸŸ¢]\", function(ret) {\n\n        if (ret) {\n            // Show a notification message\n            Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", successMessage);\n\n        } else {\n            // Show a notification message\n            Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", errorMessage);\n        }\n\n\n        // Be sure to indicate when the add-in command function is complete\n        event.completed();\n\n    });\n}\n\n\nfunction actionMarkAmber(event) {\n    const successMessage = {\n        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n        message: \"Marked message amber\",\n        icon: \"IconAmber.80x80\",\n        persistent: false,\n    };\n\n    const errorMessage = {\n        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n        message: \"Failed to mark message amber\",\n        icon: \"IconAmber.80x80\",\n        persistent: true,\n    };\n\n    setSubjectPrefix(\"[Classified Amber ðŸŸ ]\", function(ret) {\n\n        if (ret) {\n            // Show a notification message\n            Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", successMessage);\n        } else {\n            // Show a notification message\n            Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", errorMessage);\n        }\n\n\n        // Be sure to indicate when the add-in command function is complete\n        event.completed();\n\n    });\n}\n\n\n\nfunction actionMarkRed(event) {\n    const successMessage = {\n        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n        message: \"Marked message red\",\n        icon: \"IconRed.80x80\",\n        persistent: false,\n    };\n\n    const errorMessage = {\n        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n        message: \"Failed to mark message red\",\n        icon: \"IconRed.80x80\",\n        persistent: true,\n    };\n\n    setSubjectPrefix(\"[Classified Red ðŸ”´]\", function(ret) {\n\n        if (ret) {\n            // Show a notification message\n            Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", successMessage);\n\n        } else {\n            // Show a notification message\n            Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", errorMessage);\n\n        }\n\n\n        // Be sure to indicate when the add-in command function is complete\n        event.completed();\n\n    });\n}\n\nlet classifications = {\n    \"green\": {\n        \"subject\": \"[Classified Green ðŸŸ¢]\"\n    },\n    \"amber\": {\n        \"subject\": \"[Classified Amber ðŸŸ ]\"\n    },\n    \"red\": {\n        \"subject\": \"[Classified Red ðŸ”´]\"\n    }\n}\n\nconst regexp = /^(?:\\s?re:\\s?|\\s?awr:\\s?)*\\s?\\[classified (red|green|amber) \\W\\].*/u;\n\nfunction checkSubjectClassified(subject) {\n    subject = subject.toLowerCase();\n    if (regexp.test(subject)) {\n\n        console.log(\"Getting matches for \" + subject);\n        let matches = subject.match(regexp);\n\n        return classifications[matches[1]];\n    } else {\n        return false;\n    }\n}\n\n// Set the subject of the item that the user is composing.\nfunction setSubjectPrefix(prefix, callback) {\n\n    // Check conversation history\n    findConversationSubjects(mailboxItem.conversationId, function(values) {\n\n        let classifiedConversation = false;\n        let classification = \"\";\n\n        for (value of values) {\n            let curClassification = checkSubjectClassified(value);\n            if (curClassification) {\n                classifiedConversation = true;\n                classification = curClassification;\n                break;\n            }\n        }\n\n        // Check current subject\n        mailboxItem.subject.getAsync(\n            function(asyncResult) {\n                if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                    console.log(asyncResult.error.message);\n                    callback(false);\n                } else {\n                    // Successfully got the subject, display it.\n\n                    let curClassification = checkSubjectClassified(asyncResult.value)\n\n                    if (curClassification) {\n                        // Item subject classified\n\n                        if (classifiedConversation) {\n                            // TODO refactor into preflight methods, force marking for now\n                            // Item is marked and part of classified conversation\n                            \n                            if (curClassification.subject === classification.subject && classification.subject === prefix) {\n\t\t\t\t\t\t\t\t// Classification already matches, nothing to do :)\n\t\t\t\t\t\t\t\tcallback(true);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t} else {\t                         \n                                callback(false);\n                                return;\n                            }\n                            //prefix = curClassification.subject;\n                        } else {\n                            // Item is marked and part of classified conversation\n                            callback(false);\n                            return;\n                        }\n\n\n                    } else {\n\n                        if (classifiedConversation) {\n                            // TODO refactor into preflight methods, force marking for now\n                            // Iten is unmarked, and part of classified conversation, force mark\n                            prefix = classification.subject;\n                        } else {\n                            // Proceed with marking image\n                        }\n\n                    }\n\n                    subject = prefix + ' ' + asyncResult.value;\n\n                    mailboxItem.subject.setAsync(\n                        subject, null,\n                        function(asyncResult) {\n                            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                                console.log(asyncResult.error.message);\n                                callback(false);\n                            } else {\n                                // Successfully set the subject.\n                                // Do whatever appropriate for your scenario\n                                // using the arguments var1 and var2 as applicable.\n                                callback(true);\n\n\n\n                            }\n                        });\n\n\n\n\n                }\n            });\n\n\n\n    }, function(error) {\n\n        callback(false);\n\n    });\n\n\n\n}\n\n// Entry point for Contoso Message Body Checker add-in before send is allowed.\n// <param name=\"event\">MessageSend event is automatically passed by BlockOnSend code to the function specified in the manifest.</param>\nfunction validateBody(event) {\n    mailboxItem.body.getAsync(\"html\", {\n        asyncContext: event\n    }, checkBodyOnlyOnSendCallBack);\n}\n\n// Invoke by Contoso Subject and CC Checker add-in before send is allowed.\n// <param name=\"event\">MessageSend event is automatically passed by BlockOnSend code to the function specified in the manifest.</param>\nfunction validateSubjectAndCC(event) {\n    shouldChangeSubjectOnSend(event);\n}\n\n// Check if the subject should be changed. If it is already changed allow send. Otherwise change it.\n// <param name=\"event\">MessageSend event passed from the calling function.</param>\nfunction shouldChangeSubjectOnSend(event) {\n    mailboxItem.subject.getAsync({\n            asyncContext: event\n        },\n        function(asyncResult) {\n            addCCOnSend(asyncResult.asyncContext);\n            //console.log(asyncResult.value);\n            // Match string.\n            var checkSubject = (new RegExp(/\\[Checked\\]/)).test(asyncResult.value)\n            // Add [Checked]: to subject line.\n            subject = '[Checked]: ' + asyncResult.value;\n\n            // Check if a string is blank, null or undefined.\n            // If yes, block send and display information bar to notify sender to add a subject.\n            if (asyncResult.value === null || (/^\\s*$/).test(asyncResult.value)) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Please enter a subject for this email.'\n                });\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n            } else {\n                // If can't find a [Checked]: string match in subject, call subjectOnSendChange function.\n                if (!checkSubject) {\n                    subjectOnSendChange(subject, asyncResult.asyncContext);\n                    //console.log(checkSubject);\n                } else {\n                    // Allow send.\n                    asyncResult.asyncContext.completed({\n                        allowEvent: true\n                    });\n                }\n            }\n\n        }\n    )\n}\n\n// Add a CC to the email.  In this example, CC contoso@contoso.onmicrosoft.com\n// <param name=\"event\">MessageSend event passed from calling function</param>\nfunction addCCOnSend(event) {\n    mailboxItem.cc.setAsync(['Contoso@contoso.onmicrosoft.com'], {\n        asyncContext: event\n    });\n}\n\n// Check if the subject should be changed. If it is already changed allow send, otherwise change it.\n// <param name=\"subject\">Subject to set.</param>\n// <param name=\"event\">MessageSend event passed from the calling function.</param>\nfunction subjectOnSendChange(subject, event) {\n    mailboxItem.subject.setAsync(\n        subject, {\n            asyncContext: event\n        },\n        function(asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Unable to set the subject.'\n                });\n\n                // Block send.\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n            } else {\n                // Allow send.\n                asyncResult.asyncContext.completed({\n                    allowEvent: true\n                });\n            }\n\n        });\n}\n\n// Check if the body contains a specific set of blocked words. If it contains the blocked words, block email from being sent. Otherwise allows sending.\n// <param name=\"asyncResult\">MessageSend event passed from the calling function.</param>\nfunction checkBodyOnlyOnSendCallBack(asyncResult) {\n    var listOfBlockedWords = new Array(\"blockedword\", \"blockedword1\", \"blockedword2\");\n    var wordExpression = listOfBlockedWords.join('|');\n\n    // \\b to perform a \"whole words only\" search using a regular expression in the form of \\bword\\b.\n    // i to perform case-insensitive search.\n    var regexCheck = new RegExp('\\\\b(' + wordExpression + ')\\\\b', 'i');\n    var checkBody = regexCheck.test(asyncResult.value);\n\n    if (checkBody) {\n        mailboxItem.notificationMessages.addAsync('NoSend', {\n            type: 'errorMessage',\n            message: 'Blocked words have been found in the body of this email. Please remove them.'\n        });\n        // Block send.\n        asyncResult.asyncContext.completed({\n            allowEvent: false\n        });\n    } else {\n\n        // Allow send.\n        asyncResult.asyncContext.completed({\n            allowEvent: true\n        });\n    }\n}\n\n\n\n// Borrowed from easyEws\n\nfunction asyncEws(soap, successCallback, errorCallback) {\n\n    console.log(\"Starting call\");\n    mailbox.makeEwsRequestAsync(soap, function(ewsResult) {\n        console.log(\"Returning from call\");\n        if (ewsResult.status === Office.AsyncResultStatus.Succeeded) {\n            console.log(\"makeEwsRequestAsync success. \" + ewsResult.status);\n            let parser = new DOMParser();\n            let xmlDoc = parser.parseFromString(ewsResult.value, \"text/xml\");\n            successCallback(xmlDoc);\n\n        } else {\n            console.log(\"makeEwsRequestAsync failed. \" + ewsResult.error);\n            errorCallback(ewsResult.error);\n        }\n    });\n\n\n};\n\n\nfunction getNodes(node, elementNameWithNS) {\n    /** @type {string} */\n    var elementWithoutNS = elementNameWithNS.substring(elementNameWithNS.indexOf(\":\") + 1);\n    /** @type {array} */\n    var retVal = node.getElementsByTagName(elementNameWithNS);\n    if (retVal == null || retVal.length == 0) {\n        retVal = node.getElementsByTagName(elementWithoutNS);\n    }\n    return retVal;\n};\n\nfunction getSoapHeader(request) {\n    /** @type {string} */\n    var result =\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n        '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' +\n        '               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"' +\n        '               xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"' +\n        '               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"' +\n        '               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">' +\n        '   <soap:Header>' +\n        '       <RequestServerVersion Version=\"Exchange2013\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\" soap:mustUnderstand=\"0\" />' +\n        '   </soap:Header>' +\n        '   <soap:Body>' + request + '</soap:Body>' +\n        '</soap:Envelope>';\n    return result;\n};\n\nfunction findConversationSubjects(conversationId, successCallback, errorCallback) {\n    /** @type {string} */\n    var soap =\n        '       <m:GetConversationItems>' +\n        '           <m:ItemShape>' +\n        '               <t:BaseShape>IdOnly</t:BaseShape>' +\n        '               <t:AdditionalProperties>' +\n        '                   <t:FieldURI FieldURI=\"item:Subject\" />' +\n        '                   <t:FieldURI FieldURI=\"item:DateTimeReceived\" />' +\n        '               </t:AdditionalProperties>' +\n        '           </m:ItemShape>' +\n        '           <m:FoldersToIgnore>' +\n        '               <t:DistinguishedFolderId Id=\"deleteditems\" />' +\n        '               <t:DistinguishedFolderId Id=\"drafts\" />' +\n        '           </m:FoldersToIgnore>' +\n        '           <m:SortOrder>TreeOrderDescending</m:SortOrder>' +\n        '           <m:Conversations>' +\n        '               <t:Conversation>' +\n        '                   <t:ConversationId Id=\"' + conversationId + '\" />' +\n        '               </t:Conversation>' +\n        '           </m:Conversations>' +\n        '       </m:GetConversationItems>';\n    soap = getSoapHeader(soap);\n    console.log(\"got soap header\");\n    // Make EWS call\n    asyncEws(soap, function(xmlDoc) {\n        let nodes = getNodes(xmlDoc, \"t:Subject\");\n        var msgs = [];\n        for (msg of nodes) {\n            msgs.push(msg.textContent);\n        }\n        successCallback(msgs);\n\n    }, function(errorDetails) {\n        if (errorCallback != null)\n            errorCallback(errorDetails);\n    });\n};\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["mailboxItem","mailbox","__webpack_require__","g","globalThis","this","Function","e","window","Office","onReady","info","context","item","console","log","concat","host","platform","self","global","undefined","action","event","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","notificationMessages","replaceAsync","completed","actionMarkGreen","successMessage","errorMessage","setSubjectPrefix","ret","actionMarkAmber","actionMarkRed","validateBody","body","getAsync","asyncContext","checkBodyOnlyOnSendCallBack","classifications","regexp","checkSubjectClassified","subject","toLowerCase","test","matches","match","prefix","callback","conversationId","successCallback","errorCallback","soap","values","_step","classifiedConversation","classification","_iterator","_createForOfIteratorHelper","s","n","done","value","curClassification","err","f","asyncResult","status","AsyncResultStatus","Failed","error","setAsync","makeEwsRequestAsync","ewsResult","Succeeded","xmlDoc","DOMParser","parseFromString","asyncEws","_step2","node","elementNameWithNS","elementWithoutNS","retVal","msgs","_iterator2","substring","indexOf","getElementsByTagName","length","msg","push","textContent","errorDetails","wordExpression","Array","join","RegExp","addAsync","allowEvent"],"sourceRoot":""}