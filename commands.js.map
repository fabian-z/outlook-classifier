{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/./src/commands/commands.js","webpack://office-addin-taskpane-js/webpack/runtime/global"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global g, global, Office, self, window, mailbox, mailboxItem, classifications, classifierRegexp, classifiedSubjectRegexp */\n\n\nlet mailboxItem;\nlet mailbox;\nconst g = getGlobal();\n\nOffice.onReady(function(info) {\n    // If needed, Office.js is ready to be called\n    mailboxItem = Office.context.mailbox.item;\n    mailbox = Office.context.mailbox;\n\n    for (let name in classifications) {\n        let classification = classifications[name];\n        g[classification.globalFunction] = actionMarkFactory(classification);\n    }\n\n    console.log(`Office.js is now ready in ${info.host} on ${info.platform}`);\n});\n\nfunction getGlobal() {\n    return typeof self !== \"undefined\" ?\n        self :\n        typeof window !== \"undefined\" ?\n        window :\n        typeof global !== \"undefined\" ?\n        global :\n        undefined;\n}\n\n// The add-in command functions need to be available in global scope\ng.validateBody = validateBody;\n\nlet classifications = {\n    \"green\": {\n        \"name\": \"TLP Green\",\n        \"globalFunction\": \"actionMarkGreen\",\n        \"subject\": \"[Classified Green ðŸŸ¢]\",\n        \"icon80\": \"IconGreen.80x80\"\n    },\n    \"amber\": {\n        \"name\": \"TLP Amber\",\n        \"globalFunction\": \"actionMarkAmber\",\n        \"subject\": \"[Classified Amber ðŸŸ ]\",\n        \"icon80\": \"IconOrange.80x80\"\n    },\n    \"red\": {\n        \"name\": \"TLP Red\",\n        \"globalFunction\": \"actionMarkRed\",\n        \"subject\": \"[Classified Red ðŸ”´]\",\n        \"icon80\": \"IconRed.80x80\"\n    }\n}\n\nconst classifierRegexp = /\\s*\\[classified (red|green|amber) \\W\\]\\s*/giu;\nconst classifiedSubjectRegexp = /^(?:\\s?re:\\s?|\\s?aw:\\s?)*\\s*\\[classified (red|green|amber) \\W\\].*/iu;\n\nfunction removeClassification(str) {\n    return str.replace(classifierRegexp, \" \").trim();\n}\n\nfunction addClassificationPrefix(classification, str) {\n    if (!classification) {\n        return str;\n    }\n    return classification.subject + \" \" + str;\n}\n\nfunction getClassification(subject) {\n    subject = subject.toLowerCase();\n    if (classifiedSubjectRegexp.test(subject)) {\n        let matches = subject.match(classifiedSubjectRegexp);\n        return classifications[matches[1]];\n    } else {\n        return null;\n    }\n}\n\nfunction normalizeClassification(subject) {\n    let classification = getClassification(subject);\n\n    if (!classification) {\n        return subject\n    }\n\n    subject = removeClassification(subject)\n    subject = addClassificationPrefix(classification, subject)\n    return subject\n}\n\nfunction actionMarkFactory(classification) {\n\n    return function(event) {\n\n        let successMessage = {\n            type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n            message: \"Marked message \" + classification.name,\n            icon: classification.icon80,\n            persistent: false,\n        };\n\n        let errorMessage = {\n            type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\n            message: \"Failed to mark message (requested \" + classification.name + \")\",\n        };\n\n        setSubjectPrefix(classification, function(ret) {\n\n            if (ret) {\n                // Show a notification message\n                Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", successMessage);\n\n            } else {\n                // Show an error message\n                Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", errorMessage);\n            }\n\n            // Be sure to indicate when the add-in command function is complete\n            event.completed();\n\n        });\n\n    };\n\n}\n\n// Set the subject of the item that the user is composing.\nfunction setSubjectPrefix(requestedClassification, callback) {\n\n    // Check conversation history\n    findConversationSubjects(mailboxItem.conversationId, function(values) {\n\n        let classifiedConversation = false;\n        let classificationConversation = \"\";\n\n        for (value of values) {\n            let curClassification = getClassification(value);\n            if (curClassification) {\n                classifiedConversation = true;\n                classificationConversation = curClassification;\n                break;\n            }\n        }\n\n        // Check current subject\n        mailboxItem.subject.getAsync(\n            function(asyncResult) {\n                if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                    console.log(asyncResult.error.message);\n                    callback(false);\n                } else {\n                    // Successfully got the subject, display it.\n\n                    let subject = asyncResult.value;\n                    let curClassification = getClassification(subject);\n\n                    if (curClassification) {\n                        // Item subject classified\n\n                        if (classifiedConversation) {\n                            // Item is marked and part of classified conversation\n                            if (curClassification.subject === classificationConversation.subject && classificationConversation.subject === requestedClassification.subject) {\n                                // Classification already matches, normalize\n                                subject = normalizeClassification(subject);\n                            } else {\n                                // Do not allow reclassifying\t                         \n                                callback(false);\n                                return;\n                            }\n                            //prefix = curClassification.subject;\n                        } else {\n                            // Item is marked and not part of classified conversation, allow changing\n                            subject = removeClassification(subject);\n                            subject = addClassificationPrefix(requestedClassification, subject);\n                        }\n                    } else {\n                        if (classifiedConversation) {\n\n                            // Iten is unmarked, and part of classified conversation, force mark\n                            subject = addClassificationPrefix(classificationConversation, subject);\n                        } else {\n                            // Proceed with marking image\n                            subject = addClassificationPrefix(requestedClassification, subject);\n                        }\n                    }\n\n                    mailboxItem.subject.setAsync(\n                        subject, null,\n                        function(asyncResult) {\n                            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                                console.log(asyncResult.error.message);\n                                callback(false);\n                            } else {\n                                // Successfully set the subject.\n                                // Do whatever appropriate for your scenario\n                                // using the arguments var1 and var2 as applicable.\n                                callback(true);\n\n\n\n                            }\n                        });\n\n\n\n\n                }\n            });\n\n\n\n    }, function(error) {\n\n        callback(false);\n\n    });\n\n\n\n}\n\n\nfunction validateBody(event) {\n    /*mailboxItem.body.getAsync(\"html\", {\n        asyncContext: event\n    }, checkBodyOnlyOnSendCallBack);*/\n    forceClassificationSubject(event);\n}\n\n// Check if the subject should be changed. If it is already changed allow send. Otherwise change it.\n// <param name=\"event\">MessageSend event passed from the calling function.</param>\nfunction forceClassificationSubject(event) {\n    mailboxItem.subject.getAsync({\n            asyncContext: event\n        },\n        function(asyncResult) {\n\n            let subject = asyncResult.value;\n            let curClassification = getClassification(subject);\n\n            if (!curClassification) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Please choose a classification for this email.'\n                });\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n                return;\n            }\n            \n            // Got valid classification, force normalization and category\n            Office.context.mailbox.item.saveAsync(\n\t\t\tfunction callback(result) {\n\t\t\t\tlet itemId = result.value;\n\t\t\t\tsetCategory(itemId, curClassification.name, asyncResult.asyncContext, function(context) {\n\t\t\t\t\tsubject = normalizeClassification(subject);\n\t\t\t\t\tsubjectOnSendChange(subject, context);\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t\t\t\n\t\t\t// Process the result.\n\t\t\t});\n            \n}\n\n\nfunction subjectOnSendChange(subject, event) {\n    mailboxItem.subject.setAsync(\n        subject, {\n            asyncContext: event\n        },\n        function(asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Unable to set the subject.'\n                });\n\n                // Block send.\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n            } else {\n                // Allow send.\n                asyncResult.asyncContext.completed({\n                    allowEvent: true\n                });\n            }\n\n        });\n}\n\n\n// Demo functions adapted from Microsoft\n// MIT License, https://github.com/OfficeDev/Office-Add-in-samples\n\n\n// Invoke by Contoso Subject and CC Checker add-in before send is allowed.\n// <param name=\"event\">MessageSend event is automatically passed by BlockOnSend code to the function specified in the manifest.</param>\nfunction validateSubjectAndCC(event) {\n    shouldChangeSubjectOnSend(event);\n}\n\n// Check if the subject should be changed. If it is already changed allow send. Otherwise change it.\n// <param name=\"event\">MessageSend event passed from the calling function.</param>\nfunction shouldChangeSubjectOnSend(event) {\n    mailboxItem.subject.getAsync({\n            asyncContext: event\n        },\n        function(asyncResult) {\n            addCCOnSend(asyncResult.asyncContext);\n            //console.log(asyncResult.value);\n            // Match string.\n            var checkSubject = (new RegExp(/\\[Checked\\]/)).test(asyncResult.value)\n            // Add [Checked]: to subject line.\n            subject = '[Checked]: ' + asyncResult.value;\n\n            // Check if a string is blank, null or undefined.\n            // If yes, block send and display information bar to notify sender to add a subject.\n            if (asyncResult.value === null || (/^\\s*$/).test(asyncResult.value)) {\n                mailboxItem.notificationMessages.addAsync('NoSend', {\n                    type: 'errorMessage',\n                    message: 'Please enter a subject for this email.'\n                });\n                asyncResult.asyncContext.completed({\n                    allowEvent: false\n                });\n            } else {\n                // If can't find a [Checked]: string match in subject, call subjectOnSendChange function.\n                if (!checkSubject) {\n                    subjectOnSendChange(subject, asyncResult.asyncContext);\n                    //console.log(checkSubject);\n                } else {\n                    // Allow send.\n                    asyncResult.asyncContext.completed({\n                        allowEvent: true\n                    });\n                }\n            }\n\n        }\n    )\n}\n\n// Add a CC to the email.  In this example, CC contoso@contoso.onmicrosoft.com\n// <param name=\"event\">MessageSend event passed from calling function</param>\nfunction addCCOnSend(event) {\n    mailboxItem.cc.setAsync(['Contoso@contoso.onmicrosoft.com'], {\n        asyncContext: event\n    });\n}\n\n\n// Check if the body contains a specific set of blocked words. If it contains the blocked words, block email from being sent. Otherwise allows sending.\n// <param name=\"asyncResult\">MessageSend event passed from the calling function.</param>\nfunction checkBodyOnlyOnSendCallBack(asyncResult) {\n    var listOfBlockedWords = new Array(\"blockedword\", \"blockedword1\", \"blockedword2\");\n    var wordExpression = listOfBlockedWords.join('|');\n\n    // \\b to perform a \"whole words only\" search using a regular expression in the form of \\bword\\b.\n    // i to perform case-insensitive search.\n    var regexCheck = new RegExp('\\\\b(' + wordExpression + ')\\\\b', 'i');\n    var checkBody = regexCheck.test(asyncResult.value);\n\n    if (checkBody) {\n        mailboxItem.notificationMessages.addAsync('NoSend', {\n            type: 'errorMessage',\n            message: 'Blocked words have been found in the body of this email. Please remove them.'\n        });\n        // Block send.\n        asyncResult.asyncContext.completed({\n            allowEvent: false\n        });\n    } else {\n\n        // Allow send.\n        asyncResult.asyncContext.completed({\n            allowEvent: true\n        });\n    }\n}\n\n\n// Following functions adapted from easyEws\n// GNU Public License v3, https://github.com/davecra/easyEWS\n\nfunction asyncEws(soap, successCallback, errorCallback) {\n\n    mailbox.makeEwsRequestAsync(soap, function(ewsResult) {\n        if (ewsResult.status === Office.AsyncResultStatus.Succeeded) {\n            console.log(\"makeEwsRequestAsync success. \" + ewsResult.status);\n            let parser = new DOMParser();\n            let xmlDoc = parser.parseFromString(ewsResult.value, \"text/xml\");\n            successCallback(xmlDoc);\n        } else {\n            console.log(\"makeEwsRequestAsync failed. \" + ewsResult.error);\n            errorCallback(ewsResult.error);\n        }\n    });\n\n};\n\nfunction getNodes(node, elementNameWithNS) {\n    let elementWithoutNS = elementNameWithNS.substring(elementNameWithNS.indexOf(\":\") + 1);\n    let retVal = node.getElementsByTagName(elementNameWithNS);\n    if (retVal == null || retVal.length == 0) {\n        retVal = node.getElementsByTagName(elementWithoutNS);\n    }\n    return retVal;\n};\n\nfunction getSoapHeader(request) {\n    let result =\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n        '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' +\n        '               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"' +\n        '               xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"' +\n        '               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"' +\n        '               xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">' +\n        '   <soap:Header>' +\n        '       <RequestServerVersion Version=\"Exchange2013\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\" soap:mustUnderstand=\"0\" />' +\n        '   </soap:Header>' +\n        '   <soap:Body>' + request + '</soap:Body>' +\n        '</soap:Envelope>';\n    return result;\n};\n\nfunction findConversationSubjects(conversationId, successCallback, errorCallback) {\n    if (!conversationId) {\n        // Trivial case, no conversations here\n        successCallback([]);\n    }\n    let soap =\n        '       <m:GetConversationItems>' +\n        '           <m:ItemShape>' +\n        '               <t:BaseShape>IdOnly</t:BaseShape>' +\n        '               <t:AdditionalProperties>' +\n        '                   <t:FieldURI FieldURI=\"item:Subject\" />' +\n        '                   <t:FieldURI FieldURI=\"item:DateTimeReceived\" />' +\n        '               </t:AdditionalProperties>' +\n        '           </m:ItemShape>' +\n        '           <m:FoldersToIgnore>' +\n        '               <t:DistinguishedFolderId Id=\"deleteditems\" />' +\n        '               <t:DistinguishedFolderId Id=\"drafts\" />' +\n        '           </m:FoldersToIgnore>' +\n        '           <m:SortOrder>TreeOrderDescending</m:SortOrder>' +\n        '           <m:Conversations>' +\n        '               <t:Conversation>' +\n        '                   <t:ConversationId Id=\"' + conversationId + '\" />' +\n        '               </t:Conversation>' +\n        '           </m:Conversations>' +\n        '       </m:GetConversationItems>';\n    soap = getSoapHeader(soap);\n    // Make EWS call\n    asyncEws(soap, function(xmlDoc) {\n        let nodes = getNodes(xmlDoc, \"t:Subject\");\n        let msgs = [];\n        for (let msg of nodes) {\n            msgs.push(msg.textContent);\n        }\n        successCallback(msgs);\n\n    }, function(errorDetails) {\n        if (errorCallback != null)\n            errorCallback(errorDetails);\n    });\n};\n\nfunction setCategory(itemId, category, context, callback) {\n\t// ignore missing item ID to improve UX\n\tif (!itemId) {\n\t\tconsole.log(\"Ignoring invalid itemId in setCategory: \"+itemId)\n\t\tcallback(context);\n\t\treturn;\n\t}\n\t\n\tlet soapUpdate = `<UpdateItem MessageDisposition=\"SaveOnly\" ConflictResolution=\"AlwaysOverwrite\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/messages\">\n\t\t\t<ItemChanges>\n\t\t\t\t<t:ItemChange>\n\t\t\t\t\t<t:ItemId Id=\"`+itemId+`\"/>\n\t\t\t\t\t<t:Updates>\n\t\t\t\t\t\t<t:SetItemField>\n\t\t\t\t\t\t\t<t:ExtendedFieldURI PropertySetId=\"00020329-0000-0000-C000-000000000046\" PropertyName=\"Keywords\" PropertyType=\"StringArray\" />\n\t\t\t\t\t\t\t<t:Message>\n\t\t\t\t\t\t\t\t<t:ExtendedProperty>\n\t\t\t\t\t\t\t\t\t<t:ExtendedFieldURI PropertySetId=\"00020329-0000-0000-C000-000000000046\" PropertyName=\"Keywords\" PropertyType=\"StringArray\" />\n\t\t\t\t\t\t\t\t\t<t:Values>\n\t\t\t\t\t\t\t\t\t\t<t:Value>`+category+`</t:Value>\n\t\t\t\t\t\t\t\t\t</t:Values>\n\t\t\t\t\t\t\t\t</t:ExtendedProperty>\n\t\t\t\t\t\t\t</t:Message>\n\t\t\t\t\t\t</t:SetItemField>\n\t\t\t\t\t</t:Updates>\n\t\t\t\t</t:ItemChange>\n\t\t\t</ItemChanges>\n\t\t</UpdateItem>`;\n    \n  let soap = getSoapHeader(soapUpdate);\n \n  asyncEws(soap, function(xmlDoc) {\n       console.log(\"Successfully set category: \" + xmlDoc);\n       callback(context);\n\n    }, function(errorDetails) {\n      console.log(\"Error setting category: \" + errorDetails);\n      callback(context);\n  });    \n     \n}\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["mailboxItem","mailbox","__webpack_require__","g","globalThis","this","Function","e","window","self","global","undefined","Office","onReady","info","name","context","item","classifications","classification","globalFunction","actionMarkFactory","console","log","concat","host","platform","validateBody","event","subject","getAsync","asyncContext","asyncResult","value","curClassification","getClassification","notificationMessages","addAsync","type","message","completed","allowEvent","saveAsync","result","itemId","category","callback","asyncEws","getSoapHeader","xmlDoc","errorDetails","setCategory","setAsync","status","AsyncResultStatus","Failed","subjectOnSendChange","normalizeClassification","forceClassificationSubject","classifierRegexp","classifiedSubjectRegexp","removeClassification","str","replace","trim","addClassificationPrefix","toLowerCase","test","matches","match","requestedClassification","successMessage","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","icon80","persistent","errorMessage","ErrorMessage","ret","replaceAsync","conversationId","successCallback","errorCallback","soap","_step2","node","elementNameWithNS","elementWithoutNS","retVal","msgs","_iterator2","_createForOfIteratorHelper","substring","indexOf","getElementsByTagName","length","s","n","done","msg","push","textContent","err","f","findConversationSubjects","values","_step","classifiedConversation","classificationConversation","_iterator","error","makeEwsRequestAsync","ewsResult","Succeeded","DOMParser","parseFromString","request"],"sourceRoot":""}